import unittest

ready = True
if ready:
    from code import QuadraticFit
else:
    from solution import QuadraticFit

class TestQuadraticFit(unittest.TestCase):
    def test0(self):
        qf = QuadraticFit()
        qf.observe(0, 0, 0)
        qf.observe(5, 1, 1)
        qf.observe(10, 2, 0)

        self.assertAlmostEqual(qf.predict(0)[0], 0, places=3)
        self.assertAlmostEqual(qf.predict(0)[1], 0, places=3)
        self.assertAlmostEqual(qf.predict(5)[0], 1, places=3)
        self.assertAlmostEqual(qf.predict(5)[1], 1, places=3)
        self.assertAlmostEqual(qf.predict(10)[0], 2, places=3)
        self.assertAlmostEqual(qf.predict(10)[1], 0, places=3)

    def test1(self):
        qf = QuadraticFit()
        qf.observe(1, 0, 0)
        qf.observe(2, 1, 1)
        qf.observe(3, 2, 1)

        predictions = [
            (-1.0000000000000013, -2.0000000000000031),
            (-8.8817841970012523e-16, -8.8817841970012523e-16),
            (0.99999999999999867, 0.99999999999999911),
            (1.9999999999999969, 0.99999999999999689),
            (2.9999999999999947, -8.4376949871511897e-15),
            (3.9999999999999916, -2.0000000000000164),
            (4.9999999999999876, -5.0000000000000249),
            (5.9999999999999822, -9.0000000000000373),
            (6.9999999999999751, -14.000000000000053),
            (7.999999999999968, -20.000000000000068),
            (8.9999999999999609, -27.000000000000092)
        ]
        for t, prediction in enumerate(predictions):
            self.assertAlmostEqual(qf.predict(t)[0], prediction[0], places=3)
            self.assertAlmostEqual(qf.predict(t)[1], prediction[1], places=3)

    def test2(self):
        qf = QuadraticFit()
        qf.observe(5, 0, 0)
        qf.observe(20, 1, 1)
        qf.observe(15, 2, 1)

        predictions = [
            (-3.0000000000000036, -1.0000000000000004),
            (-2.2933333333333366, -0.77333333333333376),
            (-1.6400000000000028, -0.56000000000000039),
            (-1.0400000000000023, -0.36000000000000032),
            (-0.4933333333333354, -0.17333333333333356),
            (-1.3322676295501878e-15, -2.2204460492503131e-16),
            (0.43999999999999861, 0.15999999999999992),
            (0.82666666666666622, 0.30666666666666642),
            (1.1599999999999993, 0.43999999999999995),
            (1.4400000000000004, 0.56000000000000005),
            (1.666666666666667, 0.66666666666666674),
            (1.8400000000000007, 0.76000000000000023),
            (1.9600000000000009, 0.84000000000000008),
            (2.0266666666666682, 0.90666666666666695),
            (2.0400000000000018, 0.96000000000000041),
            (2.0000000000000018, 1.0000000000000009),
            (1.906666666666669, 1.0266666666666673),
            (1.7600000000000025, 1.0400000000000005),
            (1.5600000000000032, 1.0400000000000005),
            (1.3066666666666702, 1.0266666666666677)
        ]

        for t, prediction in enumerate(predictions):
            self.assertAlmostEqual(qf.predict(t)[0], prediction[0], places=3)
            self.assertAlmostEqual(qf.predict(t)[1], prediction[1], places=3)

    def test3(self):
        qf = QuadraticFit()
        qf.observe(5, 0, 0)
        qf.observe(20, 1, 1)
        qf.observe(15, 2, 1)
        qf.observe(15, 2, 2)
        qf.observe(5, 2, 2)

        predictions = [
            (-0.99999999999999822, 2.1454186664365724e-15),
            (-0.51999999999999913, 0.24000000000000146),
            (-0.079999999999999849, 0.46000000000000091),
            (0.31999999999999962, 0.66000000000000025),
            (0.67999999999999905, 0.83999999999999986),
            (0.99999999999999867, 0.99999999999999956),
            (1.2799999999999985, 1.1399999999999992),
            (1.5199999999999982, 1.2599999999999991),
            (1.719999999999998, 1.359999999999999),
            (1.8799999999999977, 1.4399999999999991),
            (1.9999999999999978, 1.4999999999999991),
            (2.0799999999999983, 1.5399999999999989),
            (2.1199999999999983, 1.5599999999999992),
            (2.1199999999999988, 1.5599999999999996),
            (2.0800000000000001, 1.5399999999999996),
            (2.0000000000000004, 1.5000000000000002),
            (1.8800000000000008, 1.4400000000000008),
            (1.7200000000000015, 1.3600000000000017),
            (1.5200000000000022, 1.2600000000000025),
            (1.2800000000000038, 1.1400000000000028)
        ]

        for t, prediction in enumerate(predictions):
            self.assertAlmostEqual(qf.predict(t)[0], prediction[0], places=3)
            self.assertAlmostEqual(qf.predict(t)[1], prediction[1], places=3)

if __name__ == '__main__':
    unittest.main(exit=False)
